# -*- coding: utf-8 -*-
"""
Created on Mon May 18 10:29:25 2020
@author: Shadow
"""
##################
################## Import packages.
##################
import time
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC # available since 2.26.0
from selenium.webdriver.common.action_chains import ActionChains
from bs4 import BeautifulSoup
import pandas as pd
import requests
import urllib
import re
def newMatrix(f,c,n):
    matriz=[]
    for i in range(f):
        a=[n]*c
        matriz.append(a)
    return matriz

####################
#################### CODE FOR SCRAP SIAF, Particularmente el sector Agricultura
####################

########################################
######################################## Definicion de carpetas. Para utilizar este codigo es importante tener una carpeta en la cual
######################################## un archivo .exe, el cual es utilizado para que tu sistema ingreso al buscador. Para obtenerlo ingresar 
######################################## a https://chromedriver.chromium.org/downloads   
########################################

Direc1 = r'C:\Users\hp\Google Drive\MINAGRI-Donwload\SIAF\Output'                               ### Direccion de donde se guardaran los resultados
Direc2 = r'C:\Users\hp\Google Drive\MINAGRI-Donwload\SIAF\Code\Chromedriver\chromedriver.exe'   ### Direccion donde se encuentra el driver.
Output_path = r"C:\Users\hp\Google Drive\MINAGRI-Donwload\SIAF\Output\Final"                    ### Direccion de donde se guardaran los resultados
url = "http://apps5.mineco.gob.pe/transparencia/Mensual/Default.aspx"                           ### URL de la pagina de donde se descargará la información
years = [ "2014", "2015", "2016", "2017", "2018"]                                               #### Ingresos los años desde donde desea obtener información


############################################## PARTE 1, correr el codigo hasta la línea 135.  
############################################## 

for i in years:                                 ##### Crea una caperta  por año donde se guardaran los archivos descargados.    
    url_year= url  + r'?y=' + i + '&ap=ActProy' ##### Definicion de la URL que ingresará en el buscador    
    new_dir = os.path.join( Direc1, i )         ##### Definicion de la direccion de la nuevas carpetas
    if not os.path.exists(new_dir):             ##### Condicional que identifica si la carpeta que será creada existe o no.
        os.makedirs(new_dir)                    ##### Creacion de la carpeta
        
    option = webdriver.ChromeOptions()          ### Define las caracteristicas que tendrá el buscador.
    chrome_prefs = {}                           ### DEfinicion de un diccionario.      
    option.experimental_options["prefs"] = chrome_prefs ### Funcion que define las caracteristicas del buscador Chrome.
    chrome_prefs["profile.default_content_settings"] = {"images": 2} 
    chrome_prefs["profile.managed_default_content_settings"] = {"images": 2}
    option.add_experimental_option("prefs",  {'download.default_directory' : new_dir, ### Definir la carpeta en la cual se descargaran los archivos.
                                              "safebrowsing.enabled": "false"} )
    driver = webdriver.Chrome(options=option, executable_path=Direc2) ### Definicion del WebDriver.
    driver.get(url_year)                                              ### Abrir la direccion URL en la web.

    ###################################################
    ################################################### SUB-PARTE 1: Acceso hasta el especifico sector. Caso Particular Agricultura  
    ###################################################              
     
    ### Esta primera subseccion navega en la pagina, seleccion las alternativas.     
    iframe = driver.find_elements_by_tag_name('frame')[0] ### Identificar el "frame" del codigo HTML donde se encuentre la información relevante. Esto es no es usual. (particularidad de la pagina)
    driver.switch_to_frame(iframe)                        ### Accediendo la nuevo frame
    driver.find_element_by_xpath("//input[@type='submit'][@value='Nivel de Gobierno'][@onclick='OnClickButton();']").click()  ### Selecion el "Nivel"
    driver.find_element_by_xpath("//*[@id='ctl00_CPH1_RptData_ctl01_TD0']/input").click()                                     ### Escoger entre los nivel (ojo cambiar XPATH absoluto a uno relativo)
    driver.find_element_by_xpath("//input[@type='submit'][@value='Sector'][@onclick='OnClickButton();'] " ).click()           ### Presentar a nivel sector
    driver.find_element_by_xpath("//*[@id='ctl00_CPH1_RptData_ctl12_TD0']/input").click()                                     ### Escoger sector    
    driver.find_element_by_xpath("//input[@type='submit'][@value='Pliego'][@onclick='OnClickButton();']").click()             ### Escoger Pliego
      
    
    content=driver.page_source                           ### Se descarga el codigo HTML
    soup = BeautifulSoup(content)                        ### Se conviente dicho code en beautifulSoup element
    sub_pliego = soup.find_all('table', class_='Data')   ### Se busca la parte de code que contiene los input para escoger los pliegos.
    sub_pliego1 = sub_pliego[0].find_all('input')        ### Se busca los input para seleccionar 
    list_sub_pliego1=[]                                  ### Se crea una lista vacia para almacenar los inputs                                       
    for i in sub_pliego1:                                ### Se obtiene los inputs mediante este bucle                   
        a= i.get('onclick')
        list_sub_pliego1.append(a)
        
    ###################################################
    ################################################### SUB-PARTE 2: Acceso a cada pliego.  
   
    for i in list_sub_pliego1:             ### Este bucle escoge cada pieglo                                                              
        driver.find_element_by_xpath("//input[@type='radio'][@onclick = '%s' ]" %i ).click()
        driver.find_element_by_xpath("//input[@type='submit'][@value='Función'][@onclick='OnClickButton();']").click()   ### Click en funcion
        content_1=driver.page_source                                                                                     ### Se descarga el codigo HTML
        soup_1 = BeautifulSoup(content_1)                                                                                ### Se conviente dicho code en beautifulSoup element
        sub_pliego_1 = soup_1.find_all('table', class_='Data')                                                           ### Se busca la parte de code que contiene los input para escoger los pliegos.
        sub_pliego1_1 = sub_pliego_1[0].find_all('input')                                                                ### Se busca los input para seleccionar 
        list_sub_pliego1_1=[]                                                                                            ### Se crea una lista vacia para almacenar los inputs                                       
        for i in sub_pliego1_1:                                                                                          ### Se obtiene los inputs mediante este bucle                   
            a= i.get('onclick')
            list_sub_pliego1_1.append(a)
    ###################################################
    ################################################### SUB-PARTE 3: Acceso a cada funcion.             
        for i in list_sub_pliego1_1:
            driver.find_element_by_xpath("//input[@type='radio'][@onclick = '%s' ]" %i ).click() ### Escoger la funcion.
            driver.find_element_by_xpath("//input[@type='submit'][@value='División Funcional'][@onclick='OnClickButton();']").click() ### Click en division funcional
            content_2 = driver.page_source
            soup_2 = BeautifulSoup(content_2)
            sub_pliego_2 = soup_2.find_all('table', class_='Data' )
            sub_pliego1_2 = sub_pliego_2[0].find_all('input')
            list_sub_pliego1_2=[]
            for i in sub_pliego1_2:
                a = i.get('onclick')
                list_sub_pliego1_2.append(a)
    ####################################################
    ################################################### SUB-PARTE 4: Acceso a GRupo funcional.  
         
            for i in list_sub_pliego1_2:
                driver.find_element_by_xpath("//input[@type='radio'][@onclick = '%s' ]" %i ).click()                                    ### Escoger la division funcion.
                driver.find_element_by_xpath("//input[@type='submit'][@value='Grupo Funcional'][@onclick='OnClickButton();']").click()  ### Click en Grupo funcional
                content_3 = driver.page_source
                soup_3 = BeautifulSoup(content_3)
                sub_pliego_3 = soup_3.find_all('table', class_='Data' )
                sub_pliego1_3 = sub_pliego_3[0].find_all('input')
                list_sub_pliego1_3=[]
                for i in sub_pliego1_3:
                    a = i.get('onclick')
                    list_sub_pliego1_3.append(a)
    ####################################################
    ################################################### SUB-PARTE 5: Acceso PRoducto/Proyecto.  
                for i in list_sub_pliego1_3:
                    driver.find_element_by_xpath("//input[@type='radio'][@onclick = '%s' ]" %i ).click()                                        ### Escoger el Producto/Proyecto.        
                    driver.find_element_by_xpath("//input[@type='submit'][@value='Producto/Proyecto'][@onclick='OnClickButton();']").click()    ### Click en Producto/Proyecto.
                    driver.find_element_by_xpath("//a[@id='ctl00_CPH1_lbtnExportar'][@class='ToolBarBtn']").click()                             ### Click que efectua la descarga.
                    
                    ##### Las siguentes lineas indican que el buscador regrese una pagina atrás al terminar la operacion dentro del bucle.
                    driver.execute_script("window.history.go(-1)")   
                driver.execute_script("window.history.go(-1)")    
            driver.execute_script("window.history.go(-1)")            
        driver.execute_script("window.history.go(-1)")            
                    
        
        
#########################################################################################      
#########################################################################################     
######################################################################################### Organizacion de EXCELS
#########################################################################################     
#########################################################################################              
        
for i in years:
    new_dir = os.path.join( Direc1, i )                             #### Ingresar a cada carpeta por año.
    list_of_names_files = os.listdir(new_dir)                       #### Obtener los nombres de los archivos de cada carpeta.
    for ss in list_of_names_files:                                  
        if re.search( 'desktop.ini', ss ):
            list_of_names_files.remove('desktop.ini')
    
    List_of_content_files = []                                      ### Lista vacia donde se guardaran los archivos descagados.             
    for ii in list_of_names_files:                                  ### Importar cada file y ponerlo en una lista.        
        file_path=os.path.join(new_dir, ii)                         ### Definir la direccion de cada file.
        content_file = pd.read_html(file_path)                      ### Read the file as html document 
        content_file[2].insert(6,'6', ['Ejecucion/Dev', '--'], True) ### Add columns para normalizar
        content_file[2].insert(6,'6', ['Ejecucion/Gir', '--'], True) ### Add Columns  "     "
        col_names=[] ### empty list for add columns names
        for jj in range(0,9):  ### Loop for create columns names
           col_name= ' %s ' %jj
           col_names.append(col_name)
   
        content_file[2].columns = col_names                           ### Changes columns names of some element od principal list
        content_file[3].columns = col_names                           ### Changes columns names of some element od principal list
        final_content_by_parts =content_file[1]                       ### Define a dataframe that will contain the principal information
        final_content_by_parts.columns = col_names                    ### Change column name as the otthers elements
        for ll in final_content_by_parts.columns.values:              ### Convert int and float elements of data frame to str.
            final_content_by_parts[ll] = final_content_by_parts[ll].apply(str)
        for ll in content_file[2].columns.values:                     ### Convert int and float elements of data frame to str.
            content_file[2][ll] = content_file[2][ll].apply(str)
            
        final_content_by_parts= final_content_by_parts.append( content_file[2]) ### Append the dataframes to create the final sub_product
        final_content_by_parts = final_content_by_parts.append(content_file[3])        
        List_of_content_files.append(final_content_by_parts)
    
    for ii in range(0, len(List_of_content_files) ):
        if ii == 0:
            Final_product = List_of_content_files[0]
        else:
            Final_product = Final_product.append(List_of_content_files[ii])
    
    
    Output_path = os.path.join(Dir1 ,r'Final')                         ##### Creacion de carpeta donde se guarda el resultado
    if not os.path.exists(Output_path):                                ##### Condicional que identifica si la carpeta que será creada existe o no.
        os.makedirs(Output_path)                    
    final_product_name = r"SIAF_"+ i + r".csv"                         #### Definicion del nombre del file
    final_product_name = os.path.join(Output_path, final_product_name) #### Definicion de la direccion
    Final_product.to_csv( final_product_name, encoding="latin-1")      #### Exportar la info. en formato CSV y latin-1.(Este permite mantener las tildes y otras letras propias del castellano)
